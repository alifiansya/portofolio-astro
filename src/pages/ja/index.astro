---
import Layout from '../../layouts/Layout.astro';

import Navbar from '../../components/Navbar.astro';
import AboutCard from '../../components/AboutCard.astro'
import ProjectCard from '../../components/ProjectCard.astro';

import ja from '../../locales/ja.json';

import { GitHubIcon, LinkedInIcon} from '../../components/icons';
import Mail from '../../components/icons/Mail.astro';

const socialLinks = [
	{ name: "GitHub", url: "https://github.com/alifiansya", icon: GitHubIcon },
	{ name: "LinkedIn", url: "https://linkedin.com/in/alifiansyahfkp", icon: LinkedInIcon },
]

const mainPadding = "md:[padding-right:clamp(6rem,15vw,12rem)] md:[padding-left:clamp(6rem,15vw,12rem)]";
---

<Layout>
	<Navbar class={"fixed top-0 w-full bg-white transition-shadow duration-300 "+ mainPadding + " px-16"}, linkItems={ja.navbarItems}, languageItems={ja.languageItems}, currentLanguage={ja.language}/>
	<main>
		<section id="ほめ" class={"flex flex-col item-center justify-center h-screen text-center " + "px-16 " + mainPadding}>
			<img src="/images/logo.webp" alt="Mikan Logo" width="156" class="bg-gradient-to-tl from-gray-500 to-black rounded-4xl rotate-5 self-center transition duration-300 ease-in-out hover:scale-105"/>
			<h1 class="text-xl font-semibold mb-4 mt-8">{ja.home.name}</h1>
			<p class="text-gray-500 mb-8 max-w-xl mx-auto">{ja.home.description.text}</p>
			<ul class="flex justify-center gap-4">
				{socialLinks.map((link) => (
					<li>
						<a href={link.url} class="flex items-center gap-2 bg-amber-700 p-2 rounded-lg transition duration-300 ease-in-out hover:bg-amber-900">
							<link.icon class="w-4 h-4 text-white"/>
							<span class="text-white text-sm font-semibold">{link.name}</span>
						</a>
					</li>
				))}
			</ul>
		</section>
		<section id="紹介" class={"justify-center text-center bg-amber-50 py-16 " + "px-16 " + mainPadding}>
			<h1 class="text-xl font-semibold mb-12">{ja.about.name}</h1>
			<div class="flex flex-col justify-center gap-16 items-stretch md:flex-row md:gap-20">
				<article class="flex flex-col text-left text-md flex-1 items-center justify-center">
					<p>{ja.about.description.text[0]}
					</p>
					<br/>
					<p>{ja.about.description.text[1]}</p>
					<br/> 
					<p>{ja.about.description.text[2]}</p>
					<br/>
					<p>{ja.about.description.text[3]}</p>
				</article>
				<div class="flex flex-col flex-1 gap-6">
					{ja.about.description.summary.map((el) => (
						<AboutCard data={el} class="bg-white w-full text-left px-8 py-6 rounded-xl border-1 border-amber-300"/>
					))}
				</div>
			</div>
		</section>
		<section id="スキル" class={"justify-center text-center py-16 " + "px-16 " + mainPadding}>
			<h1 class="text-xl font-semibold mb-12">{ja.skills.name}</h1>
			<div class="flex flex-wrap gap-x-2 gap-y-4 md:mx-20 justify-center md:gap-4">
				{ja.skills.description.items.map((skill => (
					<span class="bg-amber-100 px-4 py-2 text-sm rounded-md transition duration-300 ease-in-out hover:scale-105 hover:rotate-2">{skill.name}</span>
				)))}
			</div>
		</section>
		<section id="プロジェクト" class={"justify-center py-16 bg-amber-50 " + "px-16 " + mainPadding}>
			<h1 class="text-xl font-semibold mb-16 text-center">{ja.projects.name}</h1>
			<div class="flex flex-wrap items-center justify-center gap-4">
				{ja.projects.description.items.map((project) => (
					<ProjectCard title={project.title}, details={project.details}, skills={project.skills}, links={project.links}/>
				))}
			</div>
		</section>
		<section id="お問い合わせ" class={"flex flex-col justify-center items-center py-16 " + "px-16 " + mainPadding}>
			<h1 class="text-xl font-semibold mb-8 text-center ">{ja.cta.name}!</h1>	
			<p class="text-lg text-center text-gray-600 mb-8">{ja.cta.description.information}</p>	
			<a href="https://linkedin.com/in/alifiansyahfkp" class="flex items-center gap-2 bg-amber-700 p-2 rounded-lg transition duration-300 ease-in-out hover:bg-amber-900">
				<Mail class="w-4 h-4 text-white"/>
				<span class="text-white text-sm font-semibold">{ja.cta.description.mailButton}</span>
			</a>	
		</section>
	</main>
	
	<footer id="footer-container" class={"flex justify-center text-center bg-amber-400 py-2 " + "px-16 " + mainPadding}>
		<p>{ja.footer}</p>
	</footer>

	<!-- Chatbot Section -->
	<div class="fixed bottom-6 right-6">
		<button id="chat-toggle" class="fixed bottom-6 right-6 p-4 rounded-full bg-amber-700 transition duration-300 ease-in-out hover:bg-amber-900" onclick="">
			<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-8 text-white">
				<path stroke-linecap="round" stroke-linejoin="round" d="M8.625 12a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm0 0H8.25m4.125 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm0 0H12m4.125 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm0 0h-.375M21 12c0 4.556-4.03 8.25-9 8.25a9.764 9.764 0 0 1-2.555-.337A5.972 5.972 0 0 1 5.41 20.97a5.969 5.969 0 0 1-.474-.065 4.48 4.48 0 0 0 .978-2.025c.09-.457-.133-.901-.467-1.226C3.93 16.178 3 14.189 3 12c0-4.556 4.03-8.25 9-8.25s9 3.694 9 8.25Z" />
			</svg> 
		</button>
		<div id="chat-box" class="hidden flex flex-col bg-amber-100 w-80 h-96 mb-20 border-amber-900 rounded-xl shadow">
			<div class="flex flex-row bg-amber-300 rounded-t-xl border-b-2 border-b-amber-50 px-4 py-3 gap-2">
				<img src="/images/logo.webp" alt="Mikan Logo" class="bg-gray-900 rounded-full rotate-5 w-12 border-2 border-amber-100"/>
				<div>
					<h1 class="text-lg font-bold">{ja.bot.name}</h1>
					<p class="text-sm">{ja.bot.description.information}</p>
				</div>
			</div>
			<div id="chat-bubble" class="flex flex-col bg-gradient-to-b from-amber-50 to-white overflow-y-auto flex-1 px-4 py-2 gap-2">
				
				<div id="container" class=`flex items-start gap-2.5 text-gray-900` >
					<div class="flex flex-col max-w-[320px] p-3 border-gray-200 bg-amber-200 rounded-xl rounded-tl-none">
					<p id="chat-opener" class="text-sm font-normal">{ja.bot.description.chatOpener}</p>
					</div>
				</div>
			</div>
			<div class="flex flex-row bg-amber-100 rounded-b-xl p-2 gap-2">
				<input id="user-prompt" type="text" placeholder="Ask MikanAI!" class="bg-white border border-amber-300 rounded-2xl px-4 py-2 flex-1">
				<button id="submit-user-prompt" class="bg-amber-500 px-2 rounded-xl transition duration-300 ease-in-out hover:bg-amber-700">
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 text-white">
						<path stroke-linecap="round" stroke-linejoin="round" d="M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5" />
					  </svg>					  
				</button>
			</div>
		</div>
	</div>
</Layout>

<script>
	let chatHistory = [document.getElementById("chat-opener")?.innerText];
	let chatCounter = 0;
	const chatToggleButton = document.getElementById("chat-toggle");
	const chatBoxContainer = document.getElementById("chat-box");

	const chatBubbleContainer = document.getElementById("chat-bubble");
	const promptTextBox = document.getElementById("user-prompt") as HTMLInputElement;
	const promptSubmitButton = document.getElementById("submit-user-prompt");

	promptSubmitButton?.addEventListener("click", () => {
		submitPrompt();
	})

	chatToggleButton?.addEventListener("click", () => {
		chatBoxContainer?.classList.toggle("hidden");
	})

	promptTextBox.addEventListener('keydown', function(event) {
		if (event.key === 'Enter') {
			event.preventDefault(); 
			submitPrompt();
		}
	});
	
	document.querySelectorAll('a[data-scroll]').forEach(anchor => {
	  anchor.addEventListener('click', (e) => {
		e.preventDefault();
		const id = anchor.getAttribute('href')?.substring(1) ?? "";
		const target = document.getElementById(id);
		if (target) {
		  target.scrollIntoView({ behavior: 'smooth' });
		}
	  });
	});

	function createChatBubble(text:string, sender = "user", counter:number) {
		const chatBubble = document.createElement("div");
		chatBubble.id = `${sender}-bubble-${counter}`;
		chatBubble.className = `flex items-start gap-2.5 text-gray-900 ${sender === "user" ? "justify-end" : ""}`;

		// Inner wrapper
		const inner = document.createElement("div");
		inner.className =
			sender === "user"
			? "flex flex-col max-w-[320px] p-3 border-gray-200 bg-blue-100 rounded-xl rounded-tr-none"
			: "flex flex-col max-w-[320px] p-3 border-gray-200 bg-amber-200 rounded-xl rounded-tl-none";

		// Paragraph
		const p = document.createElement("p");
		p.className = "text-sm font-normal break-words";
		p.textContent = text;

		// Assemble hierarchy
		inner.appendChild(p);
		chatBubble.appendChild(inner);

		return chatBubble;
	}

	function submitPrompt() {
		const userPrompt = promptTextBox.value.trim();
		if (!userPrompt) return;
		promptTextBox.value = "";

		// Create container
		const userChatBubble = createChatBubble(userPrompt, "user", chatCounter);
		chatBubbleContainer?.appendChild(userChatBubble);
		(async () => {
			const botResponse = await sendMessage(userPrompt);
			const botChatBubble = createChatBubble(botResponse.reply, "bot", chatCounter);
			chatHistory.push("user:" + userPrompt);
			chatHistory.push("MikanAI:" + botResponse.reply);
			chatCounter += 1;
			chatBubbleContainer?.appendChild(botChatBubble);
		})();
	}

	async function sendMessage(msg:string) {
		const res = await fetch("/api/chatbot", {
		method: "POST",
		headers: { "Content-Type": "application/json" },
		body: JSON.stringify({ message: msg, history: chatHistory, counter: chatCounter }),
		});

		const data = await res.json();
		return data;
	}
</script>
